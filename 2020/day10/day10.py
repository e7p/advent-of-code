# parse data
data = [int(line.strip()) for line in open("input")]

s = [0] + sorted(data)
s += [s[-1] + 3]
diffs = [s[i]-s[i-1] for i in range(1, len(s))]

result1 = sum(d == 3 for d in diffs) * sum(d == 1 for d in diffs)
print(f"part 1: {result1}")

valid_subsets = []
can_left_out = [x for x in diffs if x < 3]
# find these that can be left out

# (0),1,2,3,(6)
# (0),3,(6)
# (0),2,3,(6)
# (0),1,3,(6)
# last element must be in all cases present
# for all others something like 2^n-something related to "each third"

# out of (0),1,2,3,4,5,6,7,8,9,10,(13) which combinations are there?
# (0),3,6,9,10,(13)
# (0),3,6,8,10,(13)
# (0),3,6,8,9,10,(13)
# (0),3,6,7,10,(13)
# (0),3,6,7,9,10,(13)
# (0),3,6,7,8,10,(13)
# (0),3,6,7,8,9,10,(13)
# (0),3,5,8,10,(13)
# (0),3,5,8,9,10,(13)
# (0),3,5,7,10,(13)
# (0),3,5,7,9,10,(13)
# (0),3,5,7,8,10,(13)
# (0),3,5,7,8,9,10,(13)
# (0),3,5,6,9,10,(13)
# (0),3,5,6,8,10,(13)
# (0),3,5,6,8,9,10,(13)
# (0),3,5,6,7,10,(13)
# (0),3,5,6,7,9,10,(13)
# (0),3,5,6,7,8,10,(13)
# (0),3,5,6,7,8,9,10,(13)
# (0),3,4,7,10,(13)
# (0),3,4,7,9,10,(13)
# (0),3,4,7,8,10,(13)
# (0),3,4,7,8,9,10,(13)
# (0),3,4,6,9,10,(13)
# (0),3,4,6,8,10,(13)
# (0),3,4,6,8,9,10,(13)
# (0),3,4,6,7,10,(13)
# (0),3,4,6,7,9,10,(13)
# (0),3,4,6,7,8,10,(13)
# (0),3,4,6,7,8,9,10,(13)
# (0),3,4,5,8,10,(13)
# (0),3,4,5,8,9,10,(13)
# (0),3,4,5,7,10,(13)
# (0),3,4,5,7,9,10,(13)
# (0),3,4,5,7,8,10,(13)
# (0),3,4,5,7,8,9,10,(13)
# (0),3,4,5,6,9,10,(13)
# (0),3,4,5,6,8,10,(13)
# (0),3,4,5,6,8,9,10,(13)
# (0),3,4,5,6,7,10,(13)
# (0),3,4,5,6,7,9,10,(13)
# (0),3,4,5,6,7,8,10,(13)
# (0),3,4,5,6,7,8,9,10,(13)


# 1, 4, 7, 10


#result2 = 
#print(f"part 2: {result2}")